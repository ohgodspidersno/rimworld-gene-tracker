# Generated by Django 4.2.3 on 2023-07-25 18:26

from django.db import migrations
from django.db.migrations.exceptions import BadMigrationError
from pprint import pprint

def build_defaults(apps, schema_editor):
    # We get the model from the versioned app registry;
    # if we directly import it, it'll be the wrong version
    XenoType = apps.get_model("gene", "XenoType")
    Gene = apps.get_model("gene", "Gene")
    db_alias = schema_editor.connection.alias

    # dirtmole
    dirtmole_genes_defs = [
        'Eyes_Gray',
        'Skin_LightGray',
        'AptitudeRemarkable_Mining',
        'DarkVision',
        'MeleeDamage_Strong',
        'WoundHealing_Fast',
        'Nearsighted',
        'UVSensitivity_Intense',
        'MoveSpeed_Slow',
    ]
    dirtmole_genes = Gene.objects.using(db_alias).filter(def_name__in=dirtmole_genes_defs).distinct()
    if dirtmole_genes.count() != len(dirtmole_genes_defs):
        print()
        print(dirtmole_genes.count())
        pprint([g.def_name for g in dirtmole_genes.all()])
        print(len(dirtmole_genes_defs))
        pprint(dirtmole_genes_defs)
        print()
        raise BadMigrationError("Some dirtmole genes are missing")

    # genie
    genie_genes_defs = [
        'Hair_BaldOnly',
        'Beard_NoBeardOnly',
        'Body_Thin',
        'ElongatedFingers',
        'AptitudeRemarkable_Intellectual',
        'AptitudeRemarkable_Crafting',
        'AptitudeTerrible_Social',
        'AptitudePoor_Animals',
        'AptitudePoor_Plants',
        'Pain_Extra',
        'Delicate',
        'Aggression_DeadCalm',
    ]
    genie_genes = Gene.objects.using(db_alias).filter(def_name__in=genie_genes_defs).distinct()
    if genie_genes.count() != len(genie_genes_defs):
        print()
        print(genie_genes.count())
        pprint([g.def_name for g in genie_genes.all()])
        print(len(genie_genes_defs))
        pprint(genie_genes_defs)
        print()
        raise BadMigrationError("Some genie genes are missing")

    # highmate
    highmate_genes_defs = [
        'Body_Thin',
        'Body_Standard',
        'Skin_SheerWhite',
        'Skin_Blue',
        'Skin_Purple',
        'Hair_Grayless',
        'Hair_SnowWhite',
        'Hair_LongOnly',
        'Beauty_Beautiful',
        'PsychicAbility_Enhanced',
        'ViolenceDisabled',
        'KindInstinct',
        'Delicate',
        'AptitudeTerrible_Mining',
        'AptitudeTerrible_Plants',
        'AptitudeRemarkable_Social',
        'Mood_Sanguine',
        'MaxTemp_SmallDecrease',
        'Libido_High',
        'PsychicBonding',
    ]
    highmate_genes = Gene.objects.using(db_alias).filter(def_name__in=highmate_genes_defs).distinct()
    if highmate_genes.count() != len(highmate_genes_defs):
        print()
        print(highmate_genes.count())
        pprint([g.def_name for g in highmate_genes.all()])
        print(len(highmate_genes_defs))
        pprint(highmate_genes_defs)
        print()
        raise BadMigrationError("Some highmate genes are missing")

    # hussar
    hussar_genes_defs = [
        'Hair_ShortOnly',
        'Body_Standard',
        'Eyes_Red',
        'Body_Hulk',
        'WoundHealing_SuperFast',
        'Pain_Reduced',
        'Unstoppable',
        'MaxTemp_SmallIncrease',
        'MinTemp_SmallDecrease',
        'AptitudeRemarkable_Shooting',
        'AptitudeRemarkable_Melee',
        'ToxicEnvironmentResistance_Partial',
        'Aggression_HyperAggressive',
        'PsychicAbility_Deaf',
        'AptitudeTerrible_Plants',
        'AptitudeTerrible_Animals',
        'AptitudeTerrible_Social',
        'AptitudeTerrible_Artistic',
        'ChemicalDependency_GoJuice',
    ]
    hussar_genes = Gene.objects.using(db_alias).filter(def_name__in=hussar_genes_defs).distinct()
    if hussar_genes.count() != len(hussar_genes_defs):
        print()
        print(hussar_genes.count())
        pprint([g.def_name for g in hussar_genes.all()])
        print(len(hussar_genes_defs))
        pprint(hussar_genes_defs)
        print()
        raise BadMigrationError("Some hussar genes are missing")

    # impid
    impid_genes_defs = [
        'Skin_PaleYellow',
        'Skin_Orange',
        'Skin_DeepRed',
        'Hair_LightOrange',
        'Hair_SandyBlonde',
        'Beard_NoBeardOnly',
        'Headbone_MiniHorns',
        'FireSpew',
        'MoveSpeed_VeryQuick',
        'FireResistant',
        'MaxTemp_LargeIncrease',
        'MinTemp_SmallIncrease',
        'Immunity_Weak',
        'WoundHealing_Slow',
        'AptitudePoor_Plants',
        'AptitudePoor_Animals',
        'MeleeDamage_Weak',
        'Mood_Pessimist',
    ]
    impid_genes = Gene.objects.using(db_alias).filter(def_name__in=impid_genes_defs).distinct()
    if impid_genes.count() != len(impid_genes_defs):
        print()
        print(impid_genes.count())
        pprint([g.def_name for g in impid_genes.all()])
        print(len(impid_genes_defs))
        pprint(impid_genes_defs)
        print()
        raise BadMigrationError("Some impid genes are missing")

    # neanderthal
    neanderthal_genes_defs = [
        'Body_Standard',
        'Body_Fat',
        'Body_Hulk',
        'Jaw_Heavy',
        'Brow_Heavy',
        'MeleeDamage_Strong',
        'Robust',
        'Immunity_Strong',
        'Aggression_Aggressive',
        'AptitudePoor_Intellectual',
        'AptitudePoor_Social',
        'Learning_Slow',
        'MoveSpeed_Slow',
        'Pain_Reduced',
        'MinTemp_SmallDecrease',
        'MaxTemp_SmallIncrease',
        'AptitudePoor_Shooting',
    ]
    neanderthal_genes = Gene.objects.using(db_alias).filter(def_name__in=neanderthal_genes_defs).distinct()
    if neanderthal_genes.count() != len(neanderthal_genes_defs):
        print()
        print(neanderthal_genes.count())
        pprint([g.def_name for g in neanderthal_genes.all()])
        print(len(neanderthal_genes_defs))
        pprint(neanderthal_genes_defs)
        print()
        raise BadMigrationError("Some dirtmole neanderthal are missing")

    # pigskin
    pigskin_genes_defs = [
        'Nose_Pig',
        'Ears_Pig',
        'Body_Fat',
        'Body_Hulk',
        'Hands_Pig',
        'VoicePig',
        'Pain_Reduced',
        'Immunity_Strong',
        'StrongStomach',
        'RobustDigestion',
        'Nearsighted',
        'AptitudePoor_Cooking',
    ]
    pigskin_genes = Gene.objects.using(db_alias).filter(def_name__in=pigskin_genes_defs).distinct()
    if pigskin_genes.count() != len(pigskin_genes_defs):
        print()
        print(pigskin_genes.count())
        pprint([g.def_name for g in pigskin_genes.all()])
        print(len(pigskin_genes_defs))
        pprint(pigskin_genes_defs)
        print()
        raise BadMigrationError("Some pigskin genes are missing")

    # sanguophage
    sanguophage_genes_defs = [
        'Hemogenic',
        'HemogenDrain',
        'Bloodfeeder',
        'Coagulate',
        'XenogermReimplanter',
        'LongjumpLegs',
        'Ageless',
        'Deathless',
        'Deathrest',
        'PiercingSpine',
        'PsychicAbility_Enhanced',
        'LowSleep',
        'Beauty_Pretty',
        'MoveSpeed_Quick',
        'MeleeDamage_Strong',
        'DarkVision',
        'TotalHealing',
        'PerfectImmunity',
        'DiseaseFree',
        'ToxResist_Total',
        'WoundHealing_SuperFast',
        'AptitudeStrong_Melee',
        'AptitudeStrong_Social',
        'AptitudeStrong_Intellectual',
        'UVSensitivity_Mild',
        'FireWeakness',
        'FireTerror',
        'ArchiteMetabolism',
        'Aggression_Aggressive',
        'Robust',
    ]
    sanguophage_genes = Gene.objects.using(db_alias).filter(def_name__in=sanguophage_genes_defs).distinct()
    if sanguophage_genes.count() != len(sanguophage_genes_defs):
        print()
        print(sanguophage_genes.count())
        pprint([g.def_name for g in sanguophage_genes.all()])
        print(len(sanguophage_genes_defs))
        pprint(sanguophage_genes_defs)
        print()
        raise BadMigrationError("Some dirtmole sanguophage are missing")

    # waster
    waster_genes_defs = [
        'Skin_SlateGray',
        'Hair_Gray',
        'Head_Gaunt',
        'AddictionImmune_WakeUp',
        'ToxicEnvironmentResistance_Total',
        'Aggression_Aggressive',
        'AptitudePoor_Artistic',
        'AptitudeTerrible_Animals',
        'AptitudePoor_Cooking',
        'ChemicalDependency_Psychite',
        'Beauty_Ugly',
        'Immunity_SuperStrong',
        'PollutionRush',
    ]
    waster_genes = Gene.objects.using(db_alias).filter(def_name__in=waster_genes_defs).distinct()
    if waster_genes.count() != len(waster_genes_defs):
        print()
        print(waster_genes.count())
        pprint([g.def_name for g in waster_genes.all()])
        print(len(waster_genes_defs))
        pprint(waster_genes_defs)
        print()
        raise BadMigrationError("Some waster genes are missing")

    # yttakin
    yttakin_genes_defs = [
        'Body_Hulk',
        'VoiceRoar',
        'Furskin',
        'Hair_BaldOnly',
        'Tail_Furry',
        'Beard_Always',
        'AnimalWarcall',
        'Robust',
        'AptitudeRemarkable_Animals',
        'MeleeDamage_Strong',
        'Sleepy',
        'PsychicAbility_Dull',
        'NakedSpeed',
        'WoundHealing_Slow',
        'Aggression_Aggressive',
        'AptitudeTerrible_Mining',
    ]
    yttakin_genes = Gene.objects.using(db_alias).filter(def_name__in=yttakin_genes_defs).distinct()
    if yttakin_genes.count() != len(yttakin_genes_defs):
        print()
        print(yttakin_genes.count())
        pprint([g.def_name for g in yttakin_genes.all()])
        print(len(yttakin_genes_defs))
        pprint(yttakin_genes_defs)
        print()
        raise BadMigrationError("Some yttakin genes are missing")

    XenoType.objects.using(db_alias).get(label__iexact='dirtmole').gene_set.set(dirtmole_genes)
    XenoType.objects.using(db_alias).get(label__iexact='genie').gene_set.set(genie_genes)
    XenoType.objects.using(db_alias).get(label__iexact='highmate').gene_set.set(highmate_genes)
    XenoType.objects.using(db_alias).get(label__iexact='hussar').gene_set.set(hussar_genes)
    XenoType.objects.using(db_alias).get(label__iexact='impid').gene_set.set(impid_genes)
    XenoType.objects.using(db_alias).get(label__iexact='neanderthal').gene_set.set(neanderthal_genes)
    XenoType.objects.using(db_alias).get(label__iexact='pigskin').gene_set.set(pigskin_genes)
    XenoType.objects.using(db_alias).get(label__iexact='sanguophage').gene_set.set(sanguophage_genes)
    XenoType.objects.using(db_alias).get(label__iexact='waster').gene_set.set(waster_genes)
    XenoType.objects.using(db_alias).get(label__iexact='yttakin').gene_set.set(yttakin_genes)

def unbuild_defaults(apps, schema_editor):
    XenoType = apps.get_model("gene", "XenoType")
    db_alias = schema_editor.connection.alias
    for xenotype in XenoType.objects.using(db_alias).exclude(gene_set=None).all():
        xenotype.gene_set.clear()

class Migration(migrations.Migration):

    dependencies = [
        ('gene', '0003_xenotype_gene_set'),
    ]

    operations = [
        migrations.RunPython(build_defaults, unbuild_defaults),
    ]
